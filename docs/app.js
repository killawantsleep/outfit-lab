const CONFIG = {
  SCRIPT_URL: 'https://script.google.com/macros/s/AKfycbzI9zOhivLi4RClLlDkl7xqOQEIlWLUOIldaVwGZzOFgcG50AwFBsyfDQ2W7twPRp59eA/exec',
  DELIVERY_COST: 440
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ WebApp Telegram
if (!window.Telegram?.WebApp?.initData) {
  document.body.innerHTML = `
    <div style="padding:40px;text-align:center;">
      <h2>–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram</h2>
      <button onclick="window.location.href='https://t.me/outfitlaab_bot'" 
              style="margin-top:20px;padding:10px 20px;background:#6c5ce7;color:white;border:none;border-radius:8px;">
        –û—Ç–∫—Ä—ã—Ç—å –≤ Telegram
      </button>
    </div>
  `;
  throw new Error("Not in Telegram WebApp");
}

const tg = window.Telegram.WebApp;
tg.expand();
tg.enableClosingConfirmation();

const state = {
  items: [],
  cart: JSON.parse(localStorage.getItem('cart')) || [],
  formData: null
};

const elements = {
  itemsContainer: document.getElementById('itemsContainer'),
  cartBtn: document.getElementById('cartBtn'),
  cartCounter: document.getElementById('cartCounter'),
  cartModal: document.getElementById('cartModal'),
  closeCart: document.getElementById('closeCart'),
  checkoutBtn: document.getElementById('checkoutBtn'),
  loadingIndicator: document.getElementById('loadingIndicator'),
  searchInput: document.getElementById('searchInput'),
  searchBtn: document.getElementById('searchBtn')
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function init() {
  loadItems();
  setupEventListeners();
  updateCart();
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –ø–æ–ª–µ–π
  document.addEventListener('click', (e) => {
    if (!['INPUT', 'TEXTAREA', 'SELECT'].includes(e.target.tagName)) {
      document.activeElement?.blur();
    }
  });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
async function loadItems() {
  state.isLoading = true;
  showLoading(true);

  try {
    const response = await fetch(`${CONFIG.SCRIPT_URL}?t=${Date.now()}`);
    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
    
    const data = await response.json();
    state.items = data.filter(item => item?.name && !isNaN(item.price));
    renderItems();
  } catch (error) {
    console.error('Load error:', error);
    tg.showAlert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤");
    showError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  } finally {
    state.isLoading = false;
    showLoading(false);
  }
}

// –†–∞–±–æ—Ç–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
function addToCart(item) {
  if (isInCart(item)) {
    tg.showAlert(`"${item.name}" —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ!`);
    return;
  }

  state.cart.push(item);
  updateCart();
  renderItems();
  tg.showAlert(`"${item.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É`);
}

function removeFromCart(index) {
  state.cart.splice(index, 1);
  updateCart();
  renderCart();
  renderItems();
}

function isInCart(item) {
  return state.cart.some(cartItem => 
    cartItem.name === item.name && 
    cartItem.price === item.price && 
    cartItem.size === item.size
  );
}

function updateCart() {
  localStorage.setItem('cart', JSON.stringify(state.cart));
  elements.cartCounter.textContent = state.cart.length;
}

function calculateTotal() {
  return state.cart.reduce((sum, item) => sum + Number(item.price), 0);
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
function openModal(content = 'cart') {
  if (content === 'cart') {
    renderCartView();
  } else if (content === 'checkout') {
    renderCheckoutForm();
  }
  elements.cartModal.style.display = 'block';
  document.body.style.overflow = 'hidden';
}

function closeModal() {
  elements.cartModal.style.display = 'none';
  document.body.style.overflow = 'auto';
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã
function renderCartView() {
  const total = calculateTotal();
  
  elements.cartModal.innerHTML = `
    <div class="modal-content">
      <div class="modal-header">
        <h2>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</h2>
        <button class="close-btn">&times;</button>
      </div>
      <div class="cart-items-list">
        ${state.cart.map((item, i) => `
          <div class="cart-item">
            <img src="${item.image}" width="60" height="60">
            <div>
              <h4>${item.name}</h4>
              <p>${item.price} ‚ÇΩ ‚Ä¢ ${item.size || '–±–µ–∑ —Ä–∞–∑–º–µ—Ä–∞'}</p>
            </div>
            <button class="remove-item" data-index="${i}">‚úï</button>
          </div>
        `).join('')}
      </div>
      <div class="cart-footer">
        <div class="total-price">
          <span>–ò—Ç–æ–≥–æ:</span>
          <span>${total} ‚ÇΩ</span>
        </div>
        <button class="checkout-btn">–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑</button>
      </div>
    </div>
  `;

  document.querySelector('.close-btn').addEventListener('click', closeModal);
  document.querySelectorAll('.remove-item').forEach(btn => {
    btn.addEventListener('click', (e) => {
      removeFromCart(e.target.dataset.index);
    });
  });
  document.querySelector('.checkout-btn').addEventListener('click', () => {
    renderCheckoutForm();
  });
}

// –§–æ—Ä–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
function renderCheckoutForm() {
  const total = calculateTotal();
  
  elements.cartModal.innerHTML = `
    <div class="modal-content">
      <div class="modal-header">
        <button class="back-btn">‚Üê –ö–æ—Ä–∑–∏–Ω–∞</button>
        <h2>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h2>
        <button class="close-btn">&times;</button>
      </div>
      <form id="checkoutForm" class="checkout-form">
        <div class="form-group">
          <label>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</label>
          <div class="radio-group">
            <label><input type="radio" name="payment" value="card" checked> –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É</label>
            <label><input type="radio" name="payment" value="crypto"> –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞</label>
          </div>
        </div>
        
        <div class="form-group">
          <label>–î–æ—Å—Ç–∞–≤–∫–∞</label>
          <div class="radio-group">
            <label><input type="radio" name="delivery" value="delivery" checked> –î–æ—Å—Ç–∞–≤–∫–∞ (${CONFIG.DELIVERY_COST} ‚ÇΩ)</label>
            <label><input type="radio" name="delivery" value="pickup"> –°–∞–º–æ–≤—ã–≤–æ–∑</label>
          </div>
        </div>
        
        <div class="form-group">
          <input type="tel" name="phone" placeholder="–¢–µ–ª–µ—Ñ–æ–Ω (+7...)" required pattern="^\+7\d{10}$">
        </div>
        
        <div class="form-group">
          <input type="text" name="name" placeholder="–§–ò–û" required>
        </div>
        
        <div class="form-group delivery-address">
          <input type="text" name="address" placeholder="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–°–î–≠–ö)">
        </div>
        
        <div class="form-group">
          <input type="text" name="telegram" placeholder="Telegram @username" required>
        </div>
        
        <div class="order-summary">
          <p>–¢–æ–≤–∞—Ä—ã: <span>${total} ‚ÇΩ</span></p>
          <p class="delivery-fee">–î–æ—Å—Ç–∞–≤–∫–∞: <span>${CONFIG.DELIVERY_COST} ‚ÇΩ</span></p>
          <p class="total-price">–ò—Ç–æ–≥–æ: <span>${total + CONFIG.DELIVERY_COST} ‚ÇΩ</span></p>
        </div>
        
        <button type="submit" class="submit-btn">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑</button>
      </form>
    </div>
  `;

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
  if (state.formData) {
    Object.entries(state.formData).forEach(([name, value]) => {
      const field = document.querySelector(`[name="${name}"]`);
      if (field) field.value = value;
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  document.querySelector('.back-btn').addEventListener('click', () => {
    saveFormData();
    renderCartView();
  });

  document.querySelector('.close-btn').addEventListener('click', closeModal);

  document.querySelectorAll('input[name="delivery"]').forEach(radio => {
    radio.addEventListener('change', (e) => {
      const addressField = document.querySelector('.delivery-address');
      const deliveryFee = document.querySelector('.delivery-fee span');
      const totalPrice = document.querySelector('.total-price span');
      
      if (e.target.value === 'delivery') {
        addressField.style.display = 'block';
        deliveryFee.textContent = `${CONFIG.DELIVERY_COST} ‚ÇΩ`;
        totalPrice.textContent = `${total + CONFIG.DELIVERY_COST} ‚ÇΩ`;
      } else {
        addressField.style.display = 'none';
        deliveryFee.textContent = '0 ‚ÇΩ';
        totalPrice.textContent = `${total} ‚ÇΩ`;
      }
    });
  });

  document.getElementById('checkoutForm').addEventListener('submit', (e) => {
    e.preventDefault();
    submitOrder();
  });
}

function saveFormData() {
  const form = document.getElementById('checkoutForm');
  if (!form) return;
  
  state.formData = {
    payment: form.elements.payment.value,
    delivery: form.elements.delivery.value,
    phone: form.elements.phone.value,
    name: form.elements.name.value,
    address: form.elements.address?.value,
    telegram: form.elements.telegram.value
  };
}

function submitOrder() {
  const form = document.getElementById('checkoutForm');
  const formData = new FormData(form);
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const phone = formData.get('phone');
  if (!/^\+7\d{10}$/.test(phone)) {
    tg.showAlert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7XXXXXXXXXX)");
    return;
  }

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
  const deliveryType = formData.get('delivery');
  const deliveryCost = deliveryType === 'delivery' ? CONFIG.DELIVERY_COST : 0;
  const total = calculateTotal() + deliveryCost;

  const orderText = `
üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${formData.get('name')}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}
‚úàÔ∏è <b>Telegram:</b> @${formData.get('telegram').replace('@', '')}

üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> ${formData.get('payment') === 'card' ? '–ö–∞—Ä—Ç–∞' : '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞'}
üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> ${deliveryType === 'delivery' ? `–î–æ—Å—Ç–∞–≤–∫–∞ (${deliveryCost} ‚ÇΩ)` : '–°–∞–º–æ–≤—ã–≤–æ–∑'}
${deliveryType === 'delivery' ? `üìç <b>–ê–¥—Ä–µ—Å:</b> ${formData.get('address')}\n` : ''}

üõçÔ∏è <b>–ó–∞–∫–∞–∑:</b>
${state.cart.map(item => `- ${item.name} (${item.size || '–±–µ–∑ —Ä–∞–∑–º–µ—Ä–∞'}) - ${item.price} ‚ÇΩ`).join('\n')}

üí∞ <b>–ò—Ç–æ–≥–æ:</b> ${total} ‚ÇΩ
  `;

  try {
    tg.sendData(JSON.stringify({
      action: 'new_order',
      order: orderText,
      user: {
        name: formData.get('name'),
        phone: phone,
        telegram: formData.get('telegram')
      },
      cart: state.cart,
      total: total
    }));

    // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    state.cart = [];
    state.formData = null;
    updateCart();
    closeModal();
    tg.showAlert('‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞.');
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', e);
    tg.showAlert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞');
  }
}

// –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
function searchItems() {
  const searchTerm = elements.searchInput.value.toLowerCase().trim();
  
  if (!searchTerm) {
    renderItems();
    return;
  }

  const filteredItems = state.items.filter(item => 
    item.name.toLowerCase().includes(searchTerm) || 
    (item.size && item.size.toLowerCase().includes(searchTerm))
  );

  renderItems(filteredItems);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
  elements.cartBtn.addEventListener('click', () => openModal('cart'));
  elements.searchBtn.addEventListener('click', searchItems);
  elements.searchInput.addEventListener('keyup', (e) => {
    if (e.key === 'Enter') searchItems();
  });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showLoading(show) {
  elements.loadingIndicator.style.display = show ? 'flex' : 'none';
}

function showError(message) {
  const errorContainer = document.getElementById('errorContainer');
  if (errorContainer) {
    errorContainer.textContent = message;
    errorContainer.style.display = 'block';
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', init);