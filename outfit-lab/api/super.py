import os
import telebot
import json
import logging
import requests
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7717029640:AAFObdE7Zb0HIRU961M--BaenWsy83DUMCA"
ADMIN_IDS = [5808931101, 1931968348]
WEB_APP_URL = "https://killawantsleep.github.io/outfit-lab/"
SCRIPT_URL = "https://script.google.com/macros/s/AKfycbzI9zOhivLi4RClLlDkl7xqOQEIlWLUOIldaVwGZzOFgcG50AwFBsyfDQ2W7twPRp59eA/exec"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(BOT_TOKEN)
logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

def log_to_admin(text):
    try:
        bot.send_message(ADMIN_IDS, text, parse_mode='HTML')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –∞–¥–º–∏–Ω—É: {e}")

@bot.message_handler(commands=['start'])
def start(message):
    try:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(
            "üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", 
            web_app=WebAppInfo(url=WEB_APP_URL)
        ))
        
        bot.send_message(
            message.chat.id,
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>OUTFIT LAB</b>!",
            parse_mode="HTML",
            reply_markup=markup
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")

@bot.message_handler(commands=['additem'])
def add_item(message):
    try:
        if message.from_user.id != ADMIN_IDS:
            bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        msg = bot.reply_to(
            message,
            "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>–ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞ | –†–∞–∑–º–µ—Ä1, –†–∞–∑–º–µ—Ä2, ...</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>–§—É—Ç–±–æ–ª–∫–∞ Oversize | 1990 | XS, S, M, L, XL</code>",
            parse_mode="HTML"
        )
        bot.register_next_step_handler(msg, process_item)
        logger.info(f"–ê–¥–º–∏–Ω –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /additem: {e}")
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

def process_item(message):
    try:
        if not message.photo:
            raise ValueError("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞")

        if not message.caption:
            raise ValueError("–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞ | –†–∞–∑–º–µ—Ä1, –†–∞–∑–º–µ—Ä2, ...")

        parts = [part.strip() for part in message.caption.split('|')]
        if len(parts) < 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ: –ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞ | –†–∞–∑–º–µ—Ä—ã")

        name, price = parts[:2]
        price = float(price.replace(',', '.').strip())
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
        sizes = [size.strip() for size in parts[2].split(',') if size.strip()]
        if not sizes:
            raise ValueError("–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑–º–µ—Ä")
        
        # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–æ—Ç–æ
        file_info = bot.get_file(message.photo[-1].file_id)
        image_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Google Sheets –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        for size in sizes:
            response = requests.post(
                SCRIPT_URL,
                json={
                    'action': 'add_item',
                    'name': name,
                    'price': price,
                    'size': size,
                    'image': image_url
                },
                timeout=10
            )

            if response.status_code != 200:
                raise ValueError(f"–û—à–∏–±–∫–∞ Google Script –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ {size}: {response.text}")

        # –£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        sizes_text = ", ".join(f"<b>{size}</b>" for size in sizes)
        bot.reply_to(
            message,
            f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{name}</b>\n"
            f"–¶–µ–Ω–∞: <b>{price} ‚ÇΩ</b>\n"
            f"–†–∞–∑–º–µ—Ä—ã: {sizes_text}",
            parse_mode="HTML"
        )
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {name} —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏: {sizes}")

    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
@bot.message_handler(content_types=['web_app_data'])
def handle_web_app_data(message):
    try:
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç {message.from_user.id}")
        
        if not message.web_app_data:
            error_msg = "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö web_app_data"
            logger.error(error_msg)
            bot.send_message(message.chat.id, error_msg)
            return

        try:
            data = json.loads(message.web_app_data.data)
            logger.debug(f"–î–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=2, ensure_ascii=False)}")
        except json.JSONDecodeError as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ JSON: {e}"
            logger.error(error_msg)
            bot.send_message(message.chat.id, error_msg)
            return

        if data.get('action') != 'new_order':
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {data.get('action')}")
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        items_text = "\n".join(
            f"‚Ä¢ {item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - {item.get('price', 0)} ‚ÇΩ"
            f" ({item.get('size', '–±–µ–∑ —Ä–∞–∑–º–µ—Ä–∞')})"
            for item in data.get('cart', [])
        )
        
        order_msg = f"""
        üõç <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó</b> #{message.id}
        ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
        üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {data['user'].get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
        üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['user'].get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
        ‚úàÔ∏è <b>Telegram:</b> @{data['user'].get('telegram', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
        ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
        üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> {"–ö–∞—Ä—Ç–∞" if data.get('payment') == 'card' else "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"}
        üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {"–°–∞–º–æ–≤—ã–≤–æ–∑" if data.get('delivery') == 'pickup' else f"–î–æ—Å—Ç–∞–≤–∫–∞ ({data.get('delivery_cost', 0)} ‚ÇΩ)"}
        üìç <b>–ê–¥—Ä–µ—Å:</b> {data.get('address', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
        ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
        üõí <b>–¢–æ–≤–∞—Ä—ã:</b>
        {items_text}
        ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
        üí∞ <b>–ò—Ç–æ–≥–æ:</b> {data.get('total', 0)} ‚ÇΩ
        """

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–≤—è–∑–∏
        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", url=f"tel:{data['user'].get('phone', '')}"),
            InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", url=f"https://t.me/{data['user'].get('telegram', '')}")
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
        try:
            bot.send_message(
                ADMIN_IDS,
                order_msg,
                parse_mode="HTML",
                reply_markup=markup
            )
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
            
            # –†–µ–∑–µ—Ä–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Google Script
            requests.post(SCRIPT_URL, json={
                'action': 'forward_order',
                'order': data,
                'error': str(e)
            })

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(
            message.chat.id,
            "‚úÖ <b>–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n"
            "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <b>#{message.id}</b>",
            parse_mode="HTML"
        )

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        log_to_admin(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ:\n<code>{e}</code>")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @outfitlaab_bot",
            parse_mode="HTML"
        )

@bot.message_handler(commands=['test'])
def test_command(message):
    try:
        bot.reply_to(message, "üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!")
        logger.info(f"–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

if __name__ == '__main__':
    logger.info("=== –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ===")
    try:
        bot.infinity_polling()
    except Exception as e:
        logger.critical(f"–ë–æ—Ç —É–ø–∞–ª: {e}", exc_info=True)
        log_to_admin(f"üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:\n<code>{e}</code>") 