import os
import telebot
import json
import logging
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7717029640:AAFObdE7Zb0HIRU961M--BaenWsy83DUMCA"  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ô –¢–û–ö–ï–ù!
ADMIN_ID = 5000931101  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® TELEGRAM ID
WEB_APP_URL = "https://killawantsleep.github.io/outfit-lab/"
DELIVERY_COST = 440

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(BOT_TOKEN)
logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

def send_to_admin(message, parse_mode="HTML", reply_markup=None):
    try:
        bot.send_message(
            ADMIN_ID,
            message,
            parse_mode=parse_mode,
            reply_markup=reply_markup,
            disable_web_page_preview=True
        )
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {str(e)}")

@bot.message_handler(commands=['start'])
def start(message):
    try:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(
            "üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", 
            web_app=WebAppInfo(url=WEB_APP_URL)
        ))
        
        bot.send_message(
            message.chat.id,
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>OUTFIT LAB</b>!",
            parse_mode="HTML",
            reply_markup=markup
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {str(e)}")

@bot.message_handler(content_types=['web_app_data'])
def handle_web_app_data(message):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç {message.from_user.id}")
        
        if not message.web_app_data:
            logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö web_app_data")
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞")
            return

        data = json.loads(message.web_app_data.data)
        logger.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞: {json.dumps(data, indent=2, ensure_ascii=False)}")

        if data.get('action') != 'new_order':
            logger.warning("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        items_text = "\n".join(
            f"‚Ä¢ {item['name']} ({item.get('size', '–±–µ–∑ —Ä–∞–∑–º–µ—Ä–∞')}) - {item['price']} ‚ÇΩ"
            for item in data['cart']
        )
        
        msg = f"""üõí <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó</b> #{message.message_id}

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {data['user']['name']}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['user']['phone']}
‚úàÔ∏è <b>Telegram:</b> @{data['user']['telegram']}

üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> {"–ö–∞—Ä—Ç–∞" if data['payment'] == 'card' else "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"}
üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {"–°–∞–º–æ–≤—ã–≤–æ–∑" if data['delivery'] == 'pickup' else f"–î–æ—Å—Ç–∞–≤–∫–∞ ({data['delivery_cost']} ‚ÇΩ)"}
üìç <b>–ê–¥—Ä–µ—Å:</b> {data['address']}

üõçÔ∏è <b>–¢–æ–≤–∞—Ä—ã:</b>
{items_text}

üí∞ <b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b> {data['total']} ‚ÇΩ"""

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–≤—è–∑–∏
        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", url=f"tel:{data['user']['phone']}"),
            InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", url=f"https://t.me/{data['user']['telegram']}")
        )

        send_to_admin(msg, reply_markup=markup)
        
        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(
            message.chat.id,
            "‚úÖ <b>–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{message.message_id}",
            parse_mode="HTML"
        )

    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON")
        bot.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞: {str(e)}", exc_info=True)
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @outfitlaab_bot",
            parse_mode="HTML"
        )

if __name__ == '__main__':
    logger.info("=== –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ===")
    try:
        bot.infinity_polling()
    except Exception as e:
        logger.critical(f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {str(e)}", exc_info=True)