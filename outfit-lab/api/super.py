import os
import telebot
import json
import requests
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {str(e)}")
    exit(1)

class Config:
    ADMINS = [5000931101]  # –í–∞—à Telegram ID (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –≤–µ—Ä–Ω—ã–π)
    WEB_APP_URL = "https://killawantsleep.github.io/outfit-lab/"
    DELIVERY_COST = 440

def send_to_admins(message, parse_mode="HTML", reply_markup=None):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º"""
    for admin_id in Config.ADMINS:
        try:
            bot.send_message(
                admin_id,
                message,
                parse_mode=parse_mode,
                reply_markup=reply_markup,
                disable_web_page_preview=True,
                disable_notification=False  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            )
            print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {str(e)}")

@bot.message_handler(commands=['start'])
def start(message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    try:
        markup = InlineKeyboardMarkup()
        web_app_button = InlineKeyboardButton(
            "üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", 
            web_app=WebAppInfo(url=Config.WEB_APP_URL)
        )
        markup.add(web_app_button)
        
        bot.send_message(
            message.chat.id,
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>OUTFIT LAB</b>!\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤.",
            parse_mode="HTML",
            reply_markup=markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /start: {str(e)}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")

@bot.message_handler(commands=['additem'])
def add_item(message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    try:
        if message.from_user.id not in Config.ADMINS:
            return bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        
        msg = bot.send_message(
            message.chat.id,
            "üì§ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n"
            "<code>–ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞ | –†–∞–∑–º–µ—Ä</code>\n\n"
            "<i>–ü—Ä–∏–º–µ—Ä:</i>\n"
            "<i>–§—É—Ç–±–æ–ª–∫–∞ –ø—Ä–µ–º–∏—É–º | 1990 | XL</i>",
            parse_mode="HTML"
        )
        bot.register_next_step_handler(msg, process_item)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /additem: {str(e)}")
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def process_item(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ç–æ
        if not message.photo:
            raise ValueError("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
        if not message.caption:
            raise ValueError("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        
        parts = [p.strip() for p in message.caption.split('|')]
        if len(parts) < 3:
            raise ValueError("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞ | –†–∞–∑–º–µ—Ä")
        
        name, price, size = parts[:3]
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã
        try:
            price = float(price.replace(',', '.'))
            if price <= 0:
                raise ValueError("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
        except ValueError:
            raise ValueError("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        file_info = bot.get_file(message.photo[-1].file_id)
        image_url = f"https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}"
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Google Sheets
        response = requests.post(
            os.getenv("GOOGLE_SCRIPT_URL"),
            json={
                'name': name,
                'price': price,
                'image': image_url,
                'size': size
            },
            timeout=15  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
        )
        
        if response.status_code != 200:
            raise ValueError(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {response.text}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        bot.reply_to(
            message,
            f"‚úÖ <b>{name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {price} ‚ÇΩ\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä: {size}",
            parse_mode="HTML"
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        try:
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton(
                "üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", 
                web_app=WebAppInfo(url=Config.WEB_APP_URL)
            ))
            bot.send_message(
                message.chat.id,
                "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É. –ú–∞–≥–∞–∑–∏–Ω –æ–±–Ω–æ–≤–ª—ë–Ω!",
                reply_markup=markup
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏: {str(e)}")

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {error_msg}")
        bot.reply_to(message, error_msg)

@bot.message_handler(content_types=['web_app_data'])
def handle_web_app_data(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    try:
        print(f"\n=== –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç {message.from_user.id} ===\n{message.web_app_data.data}\n")
        
        # –ü—Ä–æ–±–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        send_to_admins("üîî –¢–µ—Å—Ç: –±–æ—Ç –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp")
        
        try:
            data = json.loads(message.web_app_data.data)
        except json.JSONDecodeError as e:
            error_msg = f"üö® –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {str(e)}\n–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {message.web_app_data.data}"
            print(error_msg)
            send_to_admins(error_msg)
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è
        if data.get('action') != 'new_order':
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {data.get('action')}")
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['user', 'cart', 'total']
        missing_fields = [field for field in required_fields if field not in data]
        if missing_fields:
            error_msg = f"üö® –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}"
            print(error_msg)
            send_to_admins(error_msg)
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        order_items = '\n'.join(
            f"‚Ä¢ {item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ({item.get('size', '–±–µ–∑ —Ä–∞–∑–º–µ—Ä–∞')}) - {item.get('price', '?')}‚ÇΩ" 
            for item in data['cart']
        )
        
        admin_msg = (
            "üõí <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó</b>\n\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {data['user'].get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['user'].get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"‚úàÔ∏è <b>Telegram:</b> @{data['user'].get('telegram', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            f"üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> {'–ö–∞—Ä—Ç–∞' if data.get('payment') == 'card' else '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞'}\n"
            f"üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {'–°–∞–º–æ–≤—ã–≤–æ–∑' if data.get('delivery') == 'pickup' else f'–î–æ—Å—Ç–∞–≤–∫–∞ ({Config.DELIVERY_COST}‚ÇΩ)'}\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {data.get('address', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            f"<b>–¢–æ–≤–∞—Ä—ã:</b>\n{order_items}\n\n"
            f"üí∞ <b>–ò—Ç–æ–≥–æ:</b> {data.get('total', 0)}‚ÇΩ"
        )

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton(
                "üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å",
                url=f"tel:{data['user'].get('phone', '')}"
            ),
            InlineKeyboardButton(
                "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å",
                url=f"https://t.me/{data['user'].get('telegram', '')}"
            )
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∞–º
        send_to_admins(admin_msg, reply_markup=markup)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(
            message.chat.id,
            "‚úÖ <b>–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.",
            parse_mode="HTML"
        )
        
    except Exception as e:
        error_msg = f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}\n–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(message.web_app_data.data)}\n–î–∞–Ω–Ω—ã–µ: {message.web_app_data.data}"
        print(error_msg)
        send_to_admins(error_msg)
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ @outfitlaab_bot",
            parse_mode="HTML"
        )

@bot.message_handler(commands=['test'])
def test_command(message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    try:
        if message.from_user.id not in Config.ADMINS:
            return
            
        test_msg = (
            "üîî <b>–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n"
            "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n"
            f"–í–µ—Ä—Å–∏—è: {telebot.__version__}\n"
            f"Admin ID: {message.from_user.id}"
        )
        
        send_to_admins(test_msg)
        bot.reply_to(message, "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", parse_mode="HTML")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ WebApp
        try:
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton(
                "–¢–µ—Å—Ç WebApp", 
                web_app=WebAppInfo(url=Config.WEB_APP_URL)
            ))
            bot.send_message(
                message.chat.id,
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ WebApp:",
                reply_markup=markup
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ WebApp: {str(e)}")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {str(e)}")

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    try:
        bot.infinity_polling()
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {str(e)}")
        send_to_admins(f"üö® –ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {str(e)}")