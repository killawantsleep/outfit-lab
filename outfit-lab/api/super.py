import os
import telebot
import requests
import logging
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
load_dotenv()
bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))
GOOGLE_SCRIPT_URL = os.getenv("GOOGLE_SCRIPT_URL")  # –î–æ–±–∞–≤—å—Ç–µ –≤ .env!

@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(
        message,
        "üõçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ /additem\n"
        "–§–æ—Ä–º–∞—Ç: –§–æ—Ç–æ + –ø–æ–¥–ø–∏—Å—å\n"
        "–ü—Ä–∏–º–µ—Ä: –§—É—Ç–±–æ–ª–∫–∞ Gucci | 5990 | M"
    )

@bot.message_handler(commands=['additem'])
def add_item(message):
    msg = bot.send_message(
        message.chat.id,
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –§–û–¢–û + –ø–æ–¥–ø–∏—Å—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞ | –†–∞–∑–º–µ—Ä\n"
        "–ü—Ä–∏–º–µ—Ä: –§—É—Ç–±–æ–ª–∫–∞ Gucci | 5990 | M"
    )
    bot.register_next_step_handler(msg, process_item)

def process_item(message):
    try:
        if not message.photo:
            raise ValueError("‚ùå –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ!")

        parts = message.caption.split('|')
        if len(parts) != 3:
            raise ValueError("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞ | –†–∞–∑–º–µ—Ä")

        name, price, size = parts
        if not price.strip().isdigit():
            raise ValueError("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5990)")

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
        file_info = bot.get_file(message.photo[-1].file_id)
        image_url = f"https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Google Sheets
        response = requests.post(
            GOOGLE_SCRIPT_URL,
            json={
                'action': 'add',
                'name': name.strip(),
                'price': price.strip(),
                'size': size.strip(),
                'image': image_url
            }
        )

        if response.status_code == 200:
            bot.reply_to(message, f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n{name.strip()}")
        else:
            bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        bot.reply_to(message, str(e))

if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling()